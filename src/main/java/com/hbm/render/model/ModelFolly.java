// Date: 13.01.2019 13:32:43
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package com.hbm.render.model;

import org.lwjgl.opengl.GL11;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.entity.Entity;

public class ModelFolly extends ModelBase {
	// fields
	ModelRenderer SB1;
	ModelRenderer SB2;
	ModelRenderer SB3;
	ModelRenderer SB4;
	ModelRenderer SB5;
	ModelRenderer SB6;
	ModelRenderer SB7;
	ModelRenderer SB8;
	ModelRenderer SP;
	ModelRenderer B1;
	ModelRenderer B2;
	ModelRenderer B3;
	ModelRenderer SF1;
	ModelRenderer SF2;
	ModelRenderer SF3;
	ModelRenderer SF4;
	ModelRenderer P1;
	ModelRenderer P2;
	ModelRenderer P3;
	ModelRenderer P4;
	ModelRenderer Grip;
	ModelRenderer SPointer;

	public ModelFolly() {
		this.textureWidth = 64;
		this.textureHeight = 64;

		this.SB1 = new ModelRenderer(this, 0, 0);
		this.SB1.addBox(-16F, -1F, 0F, 16, 1, 3);
		this.SB1.setRotationPoint(0F, 4F, -1.5F);
		this.SB1.setTextureSize(64, 32);
		this.SB1.mirror = true;
		setRotation(this.SB1, 0F, 0F, 0F);
		this.SB2 = new ModelRenderer(this, 0, 16);
		this.SB2.addBox(-16F, -1.5F, 0F, 16, 1, 1);
		this.SB2.setRotationPoint(0F, 4F, 1F);
		this.SB2.setTextureSize(64, 32);
		this.SB2.mirror = true;
		setRotation(this.SB2, 0F, 0F, 0F);
		this.SB3 = new ModelRenderer(this, 0, 18);
		this.SB3.addBox(-16F, -1.5F, 0F, 16, 1, 1);
		this.SB3.setRotationPoint(0F, 4F, -2F);
		this.SB3.setTextureSize(64, 32);
		this.SB3.mirror = true;
		setRotation(this.SB3, 0F, 0F, 0F);
		this.SB4 = new ModelRenderer(this, 0, 8);
		this.SB4.addBox(-16F, -4F, 0F, 16, 3, 1);
		this.SB4.setRotationPoint(0F, 4F, -2.5F);
		this.SB4.setTextureSize(64, 32);
		this.SB4.mirror = true;
		setRotation(this.SB4, 0F, 0F, 0F);
		this.SB5 = new ModelRenderer(this, 0, 12);
		this.SB5.addBox(-16F, -4F, 0F, 16, 3, 1);
		this.SB5.setRotationPoint(0F, 4F, 1.5F);
		this.SB5.setTextureSize(64, 32);
		this.SB5.mirror = true;
		setRotation(this.SB5, 0F, 0F, 0F);
		this.SB6 = new ModelRenderer(this, 0, 20);
		this.SB6.addBox(-16F, -4.5F, 0F, 16, 1, 1);
		this.SB6.setRotationPoint(0F, 4F, 1F);
		this.SB6.setTextureSize(64, 32);
		this.SB6.mirror = true;
		setRotation(this.SB6, 0F, 0F, 0F);
		this.SB7 = new ModelRenderer(this, 0, 22);
		this.SB7.addBox(-16F, -4.5F, 0F, 16, 1, 1);
		this.SB7.setRotationPoint(0F, 4F, -2F);
		this.SB7.setTextureSize(64, 32);
		this.SB7.mirror = true;
		setRotation(this.SB7, 0F, 0F, 0F);
		this.SB8 = new ModelRenderer(this, 0, 4);
		this.SB8.addBox(-16F, -5F, 0F, 16, 1, 3);
		this.SB8.setRotationPoint(0F, 4F, -1.5F);
		this.SB8.setTextureSize(64, 32);
		this.SB8.mirror = true;
		setRotation(this.SB8, 0F, 0F, 0F);
		this.SP = new ModelRenderer(this, 58, 0);
		this.SP.addBox(0F, -4F, 0F, 0, 3, 3);
		this.SP.setRotationPoint(-0.5F, 4F, -1.5F);
		this.SP.setTextureSize(64, 32);
		this.SP.mirror = true;
		setRotation(this.SP, 0F, 0F, 0F);
		this.B1 = new ModelRenderer(this, 0, 40);
		this.B1.addBox(0F, 0F, 0F, 5, 5, 3);
		this.B1.setRotationPoint(0F, -1F, -1.5F);
		this.B1.setTextureSize(64, 32);
		this.B1.mirror = true;
		setRotation(this.B1, 0F, 0F, 0F);
		this.B2 = new ModelRenderer(this, 0, 48);
		this.B2.addBox(0F, 0F, 0F, 5, 3, 5);
		this.B2.setRotationPoint(0F, 0F, -2.5F);
		this.B2.setTextureSize(64, 32);
		this.B2.mirror = true;
		setRotation(this.B2, 0F, 0F, 0F);
		this.B3 = new ModelRenderer(this, 0, 56);
		this.B3.addBox(0F, 0F, 0F, 5, 4, 4);
		this.B3.setRotationPoint(0F, -0.5F, -2F);
		this.B3.setTextureSize(64, 32);
		this.B3.mirror = true;
		setRotation(this.B3, 0F, 0F, 0F);
		this.SF1 = new ModelRenderer(this, 0, 24);
		this.SF1.addBox(-32F, -1.5F, 0F, 16, 1, 3);
		this.SF1.setRotationPoint(0F, 4F, -1.5F);
		this.SF1.setTextureSize(64, 32);
		this.SF1.mirror = true;
		setRotation(this.SF1, 0F, 0F, 0F);
		this.SF2 = new ModelRenderer(this, 0, 28);
		this.SF2.addBox(-32F, -4.5F, 0F, 16, 1, 3);
		this.SF2.setRotationPoint(0F, 4F, -1.5F);
		this.SF2.setTextureSize(64, 32);
		this.SF2.mirror = true;
		setRotation(this.SF2, 0F, 0F, 0F);
		this.SF3 = new ModelRenderer(this, 0, 32);
		this.SF3.addBox(-32F, -4F, 0F, 16, 3, 1);
		this.SF3.setRotationPoint(0F, 4F, -2F);
		this.SF3.setTextureSize(64, 32);
		this.SF3.mirror = true;
		setRotation(this.SF3, 0F, 0F, 0F);
		this.SF4 = new ModelRenderer(this, 0, 36);
		this.SF4.addBox(-32F, -4F, 0F, 16, 3, 1);
		this.SF4.setRotationPoint(0F, 4F, 1F);
		this.SF4.setTextureSize(64, 32);
		this.SF4.mirror = true;
		setRotation(this.SF4, 0F, 0F, 0F);
		this.P1 = new ModelRenderer(this, 58, 6);
		this.P1.addBox(0F, 0F, 0F, 1, 4, 2);
		this.P1.setRotationPoint(5F, 1F, -1F);
		this.P1.setTextureSize(64, 32);
		this.P1.mirror = true;
		setRotation(this.P1, 0F, 0F, 0F);
		this.P2 = new ModelRenderer(this, 52, 0);
		this.P2.addBox(-1F, -2F, 0F, 1, 2, 2);
		this.P2.setRotationPoint(6F, 1F, -1F);
		this.P2.setTextureSize(64, 32);
		this.P2.mirror = true;
		setRotation(this.P2, 0F, 0F, -0.5235988F);
		this.P3 = new ModelRenderer(this, 42, 0);
		this.P3.addBox(0F, 0F, 0F, 1, 1, 4);
		this.P3.setRotationPoint(4.5F, 1F, -2F);
		this.P3.setTextureSize(64, 32);
		this.P3.mirror = true;
		setRotation(this.P3, 0F, 0F, 0F);
		this.P4 = new ModelRenderer(this, 44, 5);
		this.P4.addBox(0F, 0F, 0F, 5, 1, 2);
		this.P4.setRotationPoint(0F, 4F, -1F);
		this.P4.setTextureSize(64, 32);
		this.P4.mirror = true;
		setRotation(this.P4, 0F, 0F, 0F);
		this.Grip = new ModelRenderer(this, 52, 8);
		this.Grip.addBox(0F, 0F, 0F, 2, 4, 1);
		this.Grip.setRotationPoint(2F, 5F, -0.5F);
		this.Grip.setTextureSize(64, 32);
		this.Grip.mirror = true;
		setRotation(this.Grip, 0F, 0F, -0.2617994F);
		this.SPointer = new ModelRenderer(this, 56, 13);
		this.SPointer.addBox(-32F, -0.5F, 0F, 3, 1, 1);
		this.SPointer.setRotationPoint(0F, 4F, -0.5F);
		this.SPointer.setTextureSize(64, 32);
		this.SPointer.mirror = true;
		setRotation(this.SPointer, 0F, 0F, 0F);
	}

	@Override
	public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5) {
		super.render(entity, f, f1, f2, f3, f4, f5);
		setRotationAngles(f, f1, f2, f3, f4, f5, entity);
		this.SB1.render(f5);
		this.SB2.render(f5);
		this.SB3.render(f5);
		this.SB4.render(f5);
		this.SB5.render(f5);
		this.SB6.render(f5);
		this.SB7.render(f5);
		this.SB8.render(f5);
		this.SP.render(f5);
		this.B1.render(f5);
		this.B2.render(f5);
		this.B3.render(f5);
		this.SF1.render(f5);
		this.SF2.render(f5);
		this.SF3.render(f5);
		this.SF4.render(f5);
		this.P1.render(f5);
		this.P2.render(f5);
		this.P3.render(f5);
		this.P4.render(f5);
		this.Grip.render(f5);
		this.SPointer.render(f5);
	}

	public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5, int state, int timer) {
		super.render(entity, f, f1, f2, f3, f4, f5);
		setRotationAngles(f, f1, f2, f3, f4, f5, entity);
		
		float rotate = (float) (Math.PI * -70D / 180D);

		if(state == 1 || state == 2) {
			this.SB1.rotateAngleZ = rotate;
			this.SB2.rotateAngleZ = rotate;
			this.SB3.rotateAngleZ = rotate;
			this.SB4.rotateAngleZ = rotate;
			this.SB5.rotateAngleZ = rotate;
			this.SB6.rotateAngleZ = rotate;
			this.SB7.rotateAngleZ = rotate;
			this.SB8.rotateAngleZ = rotate;
			this.SP.rotateAngleZ = rotate;
			this.SPointer.rotateAngleZ = rotate;
			this.SF1.rotateAngleZ = rotate;
			this.SF2.rotateAngleZ = rotate;
			this.SF3.rotateAngleZ = rotate;
			this.SF4.rotateAngleZ = rotate;
		} else {
			this.SB1.rotateAngleZ = 0;
			this.SB2.rotateAngleZ = 0;
			this.SB3.rotateAngleZ = 0;
			this.SB4.rotateAngleZ = 0;
			this.SB5.rotateAngleZ = 0;
			this.SB6.rotateAngleZ = 0;
			this.SB7.rotateAngleZ = 0;
			this.SB8.rotateAngleZ = 0;
			this.SP.rotateAngleZ = 0;
			this.SPointer.rotateAngleZ = 0;
			this.SF1.rotateAngleZ = 0;
			this.SF2.rotateAngleZ = 0;
			this.SF3.rotateAngleZ = 0;
			this.SF4.rotateAngleZ = 0;
		}
		
		this.SB1.render(f5);
		this.SB2.render(f5);
		this.SB3.render(f5);
		this.SB4.render(f5);
		this.SB5.render(f5);
		this.SB6.render(f5);
		this.SB7.render(f5);
		this.SB8.render(f5);
		
		if(state == 2 || state == 3) {
			this.SP.render(f5);
		}
		
		this.B1.render(f5);
		this.B2.render(f5);
		this.B3.render(f5);
		this.SF1.render(f5);
		this.SF2.render(f5);
		this.SF3.render(f5);
		this.SF4.render(f5);
		this.P1.render(f5);
		this.P2.render(f5);
		this.P3.render(f5);
		this.P4.render(f5);
		this.Grip.render(f5);
		this.SPointer.render(f5);
		
		if(state == 3 && timer > -1) {
			GL11.glPushMatrix();
	        GL11.glDisable(GL11.GL_TEXTURE_2D);
	        GL11.glDisable(GL11.GL_LIGHTING);

            Tessellator tessellator = Tessellator.instance;
            int color = 0x00FF00;
            
            if(timer == 0)
            	color = 0xFF0000;

            tessellator.startDrawing(3);
	        tessellator.setColorOpaque_I(color);
            tessellator.addVertex(-32F / 16F, 0 + 4F / 16F, 0);
            tessellator.addVertex(-150, timer, 0);
            tessellator.draw();

            tessellator.startDrawing(3);
	        tessellator.setColorOpaque_I(color);
            tessellator.addVertex(-32F / 16F, 0 + 4F / 16F, 0);
            tessellator.addVertex(-150, -timer, 0);
            tessellator.draw();

            tessellator.startDrawing(3);
	        tessellator.setColorOpaque_I(color);
            tessellator.addVertex(-32F / 16F, 0 + 4F / 16F, 0);
            tessellator.addVertex(-150, 0, timer);
            tessellator.draw();

            tessellator.startDrawing(3);
	        tessellator.setColorOpaque_I(color);
            tessellator.addVertex(-32F / 16F, 0 + 4F / 16F, 0);
            tessellator.addVertex(-150, 0, -timer);
            tessellator.draw();
	        
	        GL11.glEnable(GL11.GL_LIGHTING);
	        GL11.glEnable(GL11.GL_TEXTURE_2D);
			GL11.glPopMatrix();
		}
	}

	private void setRotation(ModelRenderer model, float x, float y, float z) {
		model.rotateAngleX = x;
		model.rotateAngleY = y;
		model.rotateAngleZ = z;
	}

	@Override
	public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity) {
		super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
	}

}
